////////////////////////////////////////// 

// Khuffash	 

// 31-8-23

//	This System is a Moore Finaite state Machine that detects the sequance 1011

//	System Code in Behavorial Mode  

// 	Test Bench For the System 

///////////////////////////////////////// 	   


module SysBeh(x,clk,r,y);
	input x,clk,r;
	output reg y;
	parameter s0=3'b000,s1=3'b001,s2=3'b010,s3=3'b011,s4=3'b100;
	reg [2:0] ps,ns;
	
	always@(posedge clk , negedge r) // works on positive edge for the clock , and negative edge of the reset ,active low reset.
		begin 
			if(~r)
				ps<=s0;
			else
				ps<=ns;
		end
		
	always @(ps,x)
		begin
			case(ps) //checks the posiblites of states, and assigns the ns , y for each case.
				s0:
				begin 
					y=0;
					if(x==1)
						ns=s1;
					else
						ns=s0;
				end
				
				s1:
				begin  
					y=0;
					if(x==1)
						ns=s1;
					else
						ns=s2;
				end
				
				s2:
				begin  
					y=0;
					if(x==1)
						ns=s3;
					else
						ns=s0;
				end
				
				s3:
				begin 
					y=0;
					if(x==1)
						ns=s4;
					else
						ns=s2;
				end
				
				s4:
				begin 
					y=1;
					if(x==1)
						ns=s1;
					else
						ns=s2;
				end
			default:ns=s0;	
			endcase
		end
endmodule  




module test123;
	reg x, clk, r;
	wire y;
	//Instanse of the system
	SysBeh c(.x(x), .clk(clk), .r(r), .y(y));
	
	initial begin
		// Initialize Inputs
		x = 0;
		r = 0; 
		clk = 0;
		#30ns;
		r = 1;
		#10ns;
		x = 0;
		#10ns;
		x = 1;
		#10ns;
		x = 0; 
		#10ns;
		x = 1;
		#10ns;
		// Generate the clock aligned with the sequence
		// Assuming the sequence is detected in the first rising edge of the clock after detection
		#10ns;
		clk = 1;
		#10ns;
		clk = 0;
		#10ns;
		clk = 1;
		
		#200 $finish;
	end
	always #5ns clk = ~clk;
	// Display output
	always @(posedge clk) begin
		$monitor("Time = %0t | X = %b | Y = %b", $time, x, y);
	end
endmodule